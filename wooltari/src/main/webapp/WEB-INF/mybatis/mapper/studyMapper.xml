<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="study">

	
	
	
	<!-- 스터디 카테고리 대분류 -->
	<select id="listBigCategory" resultType="com.wooltari.study.StudyCategory">
	    SELECT categoryNum, subject FROM s_category
	          WHERE parent IS NULL
	          ORDER BY categoryNum ASC
	</select>
	
	<!-- 스터디 카테고리 중분류 -->
	<select id="listSmallCategory" parameterType="Integer" resultType="com.wooltari.study.StudyCategory">
	    SELECT categoryNum, subject, parent FROM s_category
	          WHERE parent = #{parent}
	          ORDER BY categoryNum ASC
	</select>
	
	<!-- 스터디 도시 대분류 -->
	<select id="listBigCity" resultType="com.wooltari.study.StudyCity">
	    SELECT cityNum, cityName FROM s_city
	          WHERE parent IS NULL
	          ORDER BY cityNum ASC
	</select>
	
	<!-- 스터디 도시 중분류 -->
	<select id="listSmallCity" parameterType="Integer" resultType="com.wooltari.study.StudyCity">
	    SELECT cityNum, cityName, parent FROM s_city
	          WHERE parent = #{parent}
	          ORDER BY cityNum ASC
	</select>
	
	<!-- 스터디번호 가져오기  -->
	<select id="maxStudySeq" resultType="Long">
		SELECT NVL(MAX(s_num),0) FROM study
	</select>
	
	<!--스터디 생성  -->
	<insert id="insertStudy" parameterType="com.wooltari.study.StudyInfo">
		INSERT INTO study (s_num, userId , studyName, study_Info, gender, recruit, range ,imageFileName) 
		VALUES (#{s_num},#{userId},#{studyName},#{study_Info},#{gender},#{recruit},#{range},#{imageFileName, jdbcType=VARCHAR})
  	</insert>

  	<insert id="insertstudyCategory" parameterType="com.wooltari.study.StudyInfo">
  		INSERT INTO studyCategory (s_num , choiceCategory) VALUES(#{s_num},#{category})
  	</insert>
  	
  	<insert id="insertstudyCity" parameterType="com.wooltari.study.StudyInfo">
  		INSERT INTO studyLocal (s_num , choiceCity, pointx, pointy) VALUES(#{s_num},#{city},#{point_x},#{point_y})
  	</insert>
  	
  	<insert id="insertstudyTarget" parameterType="com.wooltari.study.StudyInfo">
  		INSERT INTO studyTarget (s_num , target) VALUES(#{s_num},#{s_target})
  	</insert>
  	
  	<!-- 스터디 수정 -->
  	<update id="updateStudy" parameterType="com.wooltari.study.StudyInfo">
  		UPDATE study SET studyName=#{studyName} , study_Info=#{study_Info} , imageFileName=#{imageFileName,jdbcType=VARCHAR}, recruit=#{recruit}, gender=#{gender}, range=#{range}
  		WHERE s_num=#{s_num}
  	</update>
  	
  	
  	
  	<!-- 스터디 삭제 -->
  	<delete id="deleteStudy" parameterType="Long">
  		DELETE FROM study WHERE s_num=#{s_num}
  	</delete>
  	
  	<delete id="deletestudyCategory" parameterType="Long">
  		DELETE FROM studyCategory WHERE s_num=#{s_num}
  	</delete>
  	
  	<delete id="deletestudyCity" parameterType="Long">
  		DELETE FROM studyLocal WHERE s_num=#{s_num}
  	</delete>
  	
  	<delete id="deletestudyTarget" parameterType="Long">
  		DELETE FROM studyTarget WHERE s_num=#{s_num}
  	</delete>
  	
  	
  	<!-- (내가만든)나의 스터디 리스트 -->
  	<select id="listMyStudy" parameterType="String" resultType="com.wooltari.study.StudyInfo">
		SELECT s.s_num ,s.userId, created, studyName , study_Info , imageFilename , userName , userImg
		FROM study s JOIN member m  ON s.userId = m.userId  
		WHERE s.userId = #{userId}
  	</select>
  	
  	<!-- 가입한 스터디 리스트 -->
  	<select id="listMyStudy2" parameterType="String" resultType="com.wooltari.study.StudyInfo">      
		SELECT tb.* FROM(
		    SELECT s_num, s.userId, imageFileName , created , studyName ,study_Info ,userImg ,userName
		    FROM study s
		    JOIN member m ON s.userId= m.userId
		      WHERE s.userId != #{userId}
		  )tb JOIN studyMember sm ON tb.s_num= sm.s_num
		  WHERE sm.userId=#{userId} AND enabled=1 
  	</select>
  	
  	<!-- 스터디 전체 정보 -->
  	<select id="readMyStudy" parameterType="Long" resultType="com.wooltari.study.StudyInfo">
  		SELECT * FROM study WHERE s_num = #{s_num}
  	</select>
  	
  	<select id="readMyTarget" parameterType="Long" resultType="String">
  		SELECT target FROM studyTarget WHERE s_num=#{s_num} 
  	</select>
  	
  	<select id="readMyCategory" parameterType="Long" resultType="com.wooltari.study.StudyCategory">
  		SELECT tb.* FROM
  			(SELECT p.CATEGORYNUM  , p.subject , c.CATEGORYNUM parent ,c.SUBJECT p_subject
				FROM s_category p
				JOIN s_category c ON c.CATEGORYNUM = p.parent
			)tb JOIN STUDYCATEGORY sc ON tb.CATEGORYNUM = sc.CHOICECATEGORY
			WHERE s_num=#{s_num} 
  	</select>
  	
  	<select id="readMyLocal" parameterType="Long" resultType="com.wooltari.study.StudyLocal">
  		SELECT choiceCity city, pointX , pointY FROM studyLocal WHERE s_num=#{s_num}
  	</select>
  	
  	
  	<!-- 스터디 내 게시판동적 생성 -->
  	<!--자유게시판 -->
	<update id="createStudyBoard" parameterType="Long">
	CREATE TABLE  s_${value}_Board(
  		 num NUMBER NOT NULL
  		 ,s_num NUMBER NOT NULL
  		 ,content VARCHAR2(4000) NOT NULL
   		 ,created DATE default SYSDATE
   		 ,hitCount NUMBER DEFAULT 0
   		 ,userId VARCHAR2(50) NOT NULL
   		 <!-- ,imageFileName VARCHAR2(1000) -->
   		 ,PRIMARY KEY(num)
   		 ,FOREIGN KEY(s_num) REFERENCES study(s_num) ON DELETE CASCADE
   		 ,FOREIGN KEY(userId) REFERENCES member(userId)
	)

	
	</update>
	
	<update id="dropStudyBoard" parameterType="long">
		drop table s_${value}_Board purge
	</update>
	
	
	<!-- 자유게시판 사진첨부 -->
	<update id="createStudyPhoto" parameterType="Long">
		CREATE TABLE s_${value}_Photo(
 		  num NUMBER NOT NULL
  		 ,imageFileName VARCHAR2(1000) NOT NULL
  		 ,PRIMARY KEY(num, imageFileName)
  		 ,FOREIGN KEY(num) REFERENCES s_${value}_Board(num) ON DELETE CASCADE
		)
	
	</update>
	
	<update id="dropStudyPhoto" parameterType="long">
		drop table s_${value}_Photo purge
	</update>
	

	<!--자유게시판 댓글  -->
	<update id="StudyBoardReply" parameterType="Long">
	CREATE TABLE s_${value}_BoardReply(
	    reNum number NOT NULL
	   ,num number NOT NULL
	   ,userId VARCHAR2(50) NOT NULL
	   ,content VARCHAR2(500) NOT NULL
	   ,created DATE DEFAULT SYSDATE
	   ,PRIMARY KEY(reNum)
	   ,FOREIGN KEY(num) REFERENCES s_${value}_Board(num) ON DELETE CASCADE
	   ,FOREIGN KEY(userId) REFERENCES member(userId)
   
	)
	</update>
	
	<update id="dropBoardReply" parameterType="long">
		drop table s_${value}_BoardReply purge
	</update>
	
	
	<!--자유게시판좋아요 -->
	<update id="StudyBoardLike" parameterType="Long">
	CREATE TABLE s_${value}_BoardLike(
	    num NUMBER NOT NULL
	   ,userId VARCHAR2(50) NOT NULL
	   ,PRIMARY KEY(num,userId)
	   ,FOREIGN KEY(num) REFERENCES s_${value}_Board(num) ON DELETE CASCADE
	   ,FOREIGN KEY(userId) REFERENCES member(userId)
	)
	</update>
	
	<update id="dropBoardLike" parameterType="long">
		drop table s_${value}_BoardLike purge
	</update>
	
	
	<!--일정게시판  -->
	<update id="createStudyCalendar" parameterType="Long">
	CREATE TABLE s_${value}_Calendar(
   num number NOT NULL
   ,s_num number NOT NULL
   ,subject VARCHAR2(100) NOT NULL
   ,content VARCHAR2(500)
   ,sdate date NOT NULL
   ,edate date
   ,PRIMARY KEY(num)
   ,FOREIGN KEY(s_num) REFERENCES study(s_num) ON DELETE CASCADE
)
	</update>
	
	<update id="dropStudyCalendar" parameterType="long">
		drop table s_${value}_Calendar purge
	</update>
	
	<!--일정게시판 댓글  -->
	<update id="StudyCalendarReply" parameterType="Long">
	CREATE TABLE s_${value}_CalendarReply(
   reNum number NOT NULL
   ,num number NOT NULL
   ,content VARCHAR2(500) NOT NULL
   ,PRIMARY KEY(reNum)
   ,FOREIGN KEY(num) REFERENCES s_${value}_Calendar(num) ON DELETE CASCADE
)
	</update>
	
	<update id="dropCalendarReply" parameterType="long">
		drop table s_${value}_CalendarReply purge
	</update>
  	
</mapper>